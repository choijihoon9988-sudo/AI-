rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 개인 프롬프트에 대한 규칙
    match /prompts/{promptId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      // 버전 관리 서브컬렉션 규칙
      match /versions/{versionId} {
        allow read, create: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/prompts/$(promptId)).data.userId;
      }
    }

    // 길드(팀) 정보에 대한 규칙
    match /guilds/{guildId} {
      function isGuildMember() {
        return request.auth != null && resource.data.memberIds.hasAny([request.auth.uid]);
      }
      function isGuildEditorOrOwner() {
          return request.auth != null && get(/databases/$(database)/documents/guilds/$(guildId)).data.members[request.auth.uid] in ['owner', 'editor'];
      }
      function isGuildOwner() {
        return request.auth != null && get(/databases/$(database)/documents/guilds/$(guildId)).data.members[request.auth.uid] == 'owner';
      }

      // get과 list 규칙을 read로 통합하고, isGuildMember 함수를 사용하도록 수정
      allow read: if isGuildMember();
      
      allow update, delete: if isGuildOwner();
      allow create: if request.auth != null;

      // 길드에 소속된 프롬프트 규칙
      match /prompts/{promptId} {
        allow read: if isGuildMember();
        allow write: if isGuildEditorOrOwner();
      }
    }
  }
}