rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 개인 프롬프트에 대한 규칙
    match /prompts/{promptId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      // ✨ 최종 버그 수정: get과 list 규칙을 명확히 분리하여 목록 조회 권한 문제 해결
      allow get: if isOwner();
      allow list: if request.auth != null && request.query.where.userId == request.auth.uid;
      
      // 쓰기 권한
      allow update, delete: if isOwner();
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      // 버전 관리 서브컬렉션 규칙
      match /versions/{versionId} {
        allow read, create: if isOwner();
      }
    }

    // 길드(팀) 정보에 대한 규칙
    match /guilds/{guildId} {
      function isGuildMember() {
        return request.auth != null && resource.data.memberIds.hasAny([request.auth.uid]);
      }
      function isGuildEditorOrOwner() {
          return request.auth != null && get(/databases/$(database)/documents/guilds/$(guildId)).data.members[request.auth.uid] in ['owner', 'editor'];
      }
      function isGuildOwner() {
        return request.auth != null && get(/databases/$(database)/documents/guilds/$(guildId)).data.members[request.auth.uid] == 'owner';
      }

      allow get: if isGuildMember();
      allow list: if request.auth != null && request.query.where.memberIds.hasAny([request.auth.uid]);

      allow update, delete: if isGuildOwner();
      allow create: if request.auth != null;

      match /prompts/{promptId} {
        allow read: if isGuildMember();
        allow write: if isGuildEditorOrOwner();
      }
    }
  }
}