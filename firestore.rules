rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 개인 프롬프트에 대한 규칙
    match /prompts/{promptId} {
      // 이제 이 하나의 read 규칙이 get(단일 읽기)과 list(목록 읽기)를 모두 처리합니다.
      // 사용자는 자신의 uid와 문서의 userId가 일치하는 프롬프트만 읽을 수 있습니다.
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // 쓰기 권한은 이전과 동일하게 유지됩니다.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      // 버전 관리 서브컬렉션 규칙
      match /versions/{versionId} {
        // 상위 문서에 대한 접근 권한이 있으므로, 여기도 read로 통일해주는 것이 좋습니다.
        allow read, create: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/prompts/$(promptId)).data.userId;
      }
    }

    // 길드(팀) 정보에 대한 규칙
    match /guilds/{guildId} {
      function isGuildMember() {
        return request.auth != null && resource.data.memberIds.hasAny([request.auth.uid]);
      }
      function isGuildEditorOrOwner() {
          return request.auth != null && get(/databases/$(database)/documents/guilds/$(guildId)).data.members[request.auth.uid] in ['owner', 'editor'];
      }
      function isGuildOwner() {
        return request.auth != null && get(/databases/$(database)/documents/guilds/$(guildId)).data.members[request.auth.uid] == 'owner';
      }

      allow get: if isGuildMember();
      allow list: if request.auth != null && request.query.where.memberIds.hasAny([request.auth.uid]);
      allow update, delete: if isGuildOwner();
      allow create: if request.auth != null;

      // 길드에 소속된 프롬프트 규칙
      match /prompts/{promptId} {
        allow read: if isGuildMember();
        allow write: if isGuildEditorOrOwner();
      }
    }
  }
}